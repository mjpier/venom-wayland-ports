From c2238d81d793b13f1c89e311de4857541ebb1735 Mon Sep 17 00:00:00 2001
From: A Frederick Christensen <dwl@ivories.org>
Date: Wed, 1 Feb 2023 21:35:20 -0600
Subject: [PATCH] Add SIMPLE touchscreen handling

This is based in part on original work by Bastien Brouant, "Unprex" at
https://github.com/Unprex/dwl

!!!!!!!!!!!!!!!
This patch may be used with or without the pointer-constraints branch from
sevz17's repository https://github.com/sevz17/dwl/tree/pointer-constraints

In maintaining this patch, be sure to watch for changes to
the `motionabsolute` function in sevz17's `pointer-constraints` branch:

The `touchdown` function here incorporates the contents of the `motionabsolute`
function, adds in the `wlr_cursor_warp_closest` call and then the button press

If `motionabsolute` is modified, `touchdown` should [likely] mirror any of its
modifications.
!!!!!!!!!!!!!!!
---
 dwl.c | 91 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 90 insertions(+), 1 deletion(-)

diff --git a/dwl.c b/dwl.c
index 6c34e326..73f454ae 100644
--- a/dwl.c
+++ b/dwl.c
@@ -43,6 +43,7 @@
 #include <wlr/types/wlr_session_lock_v1.h>
 #include <wlr/types/wlr_single_pixel_buffer_v1.h>
 #include <wlr/types/wlr_subcompositor.h>
+#include <wlr/types/wlr_touch.h>
 #include <wlr/types/wlr_viewporter.h>
 #include <wlr/types/wlr_virtual_keyboard_v1.h>
 #include <wlr/types/wlr_xcursor_manager.h>
@@ -245,6 +246,7 @@ static void createlocksurface(struct wl_listener *listener, void *data);
 static void createmon(struct wl_listener *listener, void *data);
 static void createnotify(struct wl_listener *listener, void *data);
 static void createpointer(struct wlr_pointer *pointer);
+static void createtouch(struct wlr_touch *touch);
 static void cursorframe(struct wl_listener *listener, void *data);
 static void destroydragicon(struct wl_listener *listener, void *data);
 static void destroyidleinhibitor(struct wl_listener *listener, void *data);
@@ -306,6 +308,8 @@ static void togglefloating(const Arg *arg);
 static void togglefullscreen(const Arg *arg);
 static void toggletag(const Arg *arg);
 static void toggleview(const Arg *arg);
+static void touchdown(struct wl_listener *listener, void *data);
+static void touchup(struct wl_listener *listener, void *data);
 static void unlocksession(struct wl_listener *listener, void *data);
 static void unmaplayersurfacenotify(struct wl_listener *listener, void *data);
 static void unmapnotify(struct wl_listener *listener, void *data);
@@ -370,6 +374,9 @@ static struct wl_listener cursor_button = {.notify = buttonpress};
 static struct wl_listener cursor_frame = {.notify = cursorframe};
 static struct wl_listener cursor_motion = {.notify = motionrelative};
 static struct wl_listener cursor_motion_absolute = {.notify = motionabsolute};
+static struct wl_listener cursor_touch_down = {.notify = touchdown};
+static struct wl_listener cursor_touch_motion = {.notify = motionabsolute};
+static struct wl_listener cursor_touch_up = {.notify = touchup};
 static struct wl_listener drag_icon_destroy = {.notify = destroydragicon};
 static struct wl_listener idle_inhibitor_create = {.notify = createidleinhibitor};
 static struct wl_listener idle_inhibitor_destroy = {.notify = destroyidleinhibitor};
@@ -1045,7 +1052,7 @@ createpointer(struct wlr_pointer *pointer)
 
 		if (libinput_device_config_scroll_get_methods(libinput_device) != LIBINPUT_CONFIG_SCROLL_NO_SCROLL)
 			libinput_device_config_scroll_set_method (libinput_device, scroll_method);
-		
+
 		if (libinput_device_config_click_get_methods(libinput_device) != LIBINPUT_CONFIG_CLICK_METHOD_NONE)
 			libinput_device_config_click_set_method (libinput_device, click_method);
 
@@ -1061,6 +1068,50 @@ createpointer(struct wlr_pointer *pointer)
 	wlr_cursor_attach_input_device(cursor, &pointer->base);
 }
 
+void
+createtouch(struct wlr_touch *touch)
+{
+	if (wlr_input_device_is_libinput(&touch->base)) {
+		struct libinput_device *libinput_device =  (struct libinput_device*)
+			wlr_libinput_get_device_handle(&touch->base);
+
+		if (libinput_device_config_tap_get_finger_count(libinput_device)) {
+			libinput_device_config_tap_set_enabled(libinput_device, tap_to_click);
+			libinput_device_config_tap_set_drag_enabled(libinput_device, tap_and_drag);
+			libinput_device_config_tap_set_drag_lock_enabled(libinput_device, drag_lock);
+			libinput_device_config_tap_set_button_map(libinput_device, button_map);
+		}
+
+		if (libinput_device_config_scroll_has_natural_scroll(libinput_device))
+			libinput_device_config_scroll_set_natural_scroll_enabled(libinput_device, natural_scrolling);
+
+		if (libinput_device_config_dwt_is_available(libinput_device))
+			libinput_device_config_dwt_set_enabled(libinput_device, disable_while_typing);
+
+		if (libinput_device_config_left_handed_is_available(libinput_device))
+			libinput_device_config_left_handed_set(libinput_device, left_handed);
+
+		if (libinput_device_config_middle_emulation_is_available(libinput_device))
+			libinput_device_config_middle_emulation_set_enabled(libinput_device, middle_button_emulation);
+
+		if (libinput_device_config_scroll_get_methods(libinput_device) != LIBINPUT_CONFIG_SCROLL_NO_SCROLL)
+			libinput_device_config_scroll_set_method (libinput_device, scroll_method);
+
+		if (libinput_device_config_click_get_methods(libinput_device) != LIBINPUT_CONFIG_CLICK_METHOD_NONE)
+			libinput_device_config_click_set_method (libinput_device, click_method);
+
+		if (libinput_device_config_send_events_get_modes(libinput_device))
+			libinput_device_config_send_events_set_mode(libinput_device, send_events_mode);
+
+		if (libinput_device_config_accel_is_available(libinput_device)) {
+			libinput_device_config_accel_set_profile(libinput_device, accel_profile);
+			libinput_device_config_accel_set_speed(libinput_device, accel_speed);
+		}
+	}
+
+	wlr_cursor_attach_input_device(cursor, &touch->base);
+}
+
 void
 cursorframe(struct wl_listener *listener, void *data)
 {
@@ -1349,6 +1400,9 @@ inputdevice(struct wl_listener *listener, void *data)
 	case WLR_INPUT_DEVICE_POINTER:
 		createpointer(wlr_pointer_from_input_device(device));
 		break;
+	case WLR_INPUT_DEVICE_TOUCH:
+		createtouch(wlr_touch_from_input_device(device));
+		break;
 	default:
 		/* TODO handle other input device types */
 		break;
@@ -2270,6 +2324,10 @@ setup(void)
 	wl_signal_add(&cursor->events.button, &cursor_button);
 	wl_signal_add(&cursor->events.axis, &cursor_axis);
 	wl_signal_add(&cursor->events.frame, &cursor_frame);
+	wl_signal_add(&cursor->events.touch_down, &cursor_touch_down);
+	wl_signal_add(&cursor->events.touch_frame, &cursor_frame);
+	wl_signal_add(&cursor->events.touch_motion, &cursor_touch_motion);
+	wl_signal_add(&cursor->events.touch_up, &cursor_touch_up);
 
 	/*
 	 * Configures a seat, which is a single "seat" at which a user sits and
@@ -2435,6 +2493,37 @@ toggleview(const Arg *arg)
 	printstatus();
 }
 
+void
+touchdown(struct wl_listener *listener, void *data)
+{
+	struct wlr_pointer_button_event *button_event = data;
+
+#ifdef POINTERCONSTRAINTS
+	struct wlr_pointer_motion_absolute_event *pointer_event = data;
+	double lx, ly, dx, dy;
+	wlr_cursor_absolute_to_layout_coords(cursor, &pointer_event->pointer->base, pointer_event->x, pointer_event->y, &lx, &ly);
+	wlr_cursor_warp_closest(cursor, &pointer_event->pointer->base, lx, ly);
+	dx = lx - cursor->x;
+	dy = ly - cursor->y;
+	motionnotify(pointer_event->time_msec, &pointer_event->pointer->base, dx, dy, dx, dy);
+#else
+	motionabsolute(listener, data);
+#endif
+
+	button_event->button=BTN_LEFT;
+	button_event->state=WLR_BUTTON_PRESSED;
+	buttonpress(listener, button_event);
+}
+
+void
+touchup(struct wl_listener *listener, void *data)
+{
+	struct wlr_pointer_button_event *button_event = data;
+	button_event->button=BTN_LEFT;
+	button_event->state=WLR_BUTTON_RELEASED;
+	buttonpress(listener, button_event);
+}
+
 void
 unlocksession(struct wl_listener *listener, void *data)
 {
